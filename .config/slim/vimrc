" 
" Simple and lighweight vim run command file. It only contains one file.
" Author: OctHe
" Copyright (C)
" 
" =====================================================================
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
if &compatible
  set nocompatible
endif

" Enable file type detection.
filetype plugin on
" Enable automatic indentation.
filetype indent on

set runtimepath-=~/.vim
set runtimepath-=~/.vim/after
set runtimepath^=~/.config/slim
set runtimepath+=~/.config/slim/after
set packpath-=~/.vim
set packpath-=~/.vim/after
set packpath^=~/.config/slim
set packpath+=~/.config/slim/after

" Keymappings {{{1

" Use <Space> as the <Leader>
" This command must be before all keymappings and plugin configs
let mapleader = ' '

" It changes the behavior of star to not jump to next word
" Yank the word into the register s, and then assign it in to the yank
" register (The register / is not writeable directly)
nmap <silent> * "syiw:let @/ = @s<CR>
" Easy-nohlsearch
nnoremap <silent> <Esc> :nohlsearch<CR>
tnoremap <silent> <Esc><Esc> <C-\><C-n><CR>
" Easy indent
vmap < <gv
vmap > >gv
" Show mappings
nnoremap <silent> <Leader>m :verbose map 

" }}}1


" Try to install minpac
let s:minpac_dir = expand('~/.config/slim/pack/minpac/opt/minpac')
if !(s:minpac_dir->isdirectory())
  execute '!git clone --depth=1 https://github.com/k-takata/minpac.git' s:minpac_dir
endif
if s:minpac_dir->isdirectory()
  packadd minpac
endif

function! PackInit() abort
  packadd minpac

  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " Additional plugins here.
  call minpac#add('LunarWatcher/auto-pairs')

  call minpac#add('tpope/vim-surround')
  call minpac#add('tpope/vim-repeat')
  call minpac#add('tpope/vim-endwise')
  call minpac#add('tpope/vim-commentary')
  call minpac#add('tpope/vim-vinegar')
  call minpac#add('tpope/vim-dispatch')
  call minpac#add('tpope/vim-fugitive')

  call minpac#add('Yggdroot/indentLine')

  call minpac#add('timsu92/vim-easymotion')

  call minpac#add('ludovicchabant/vim-gutentags')

  " starsearch: Enhanced star keymapping. Avoid jumping to next
  call minpac#add('vim-scripts/star-search')
  call minpac#add('vim-scripts/AutoComplPop')
  call minpac#add('vim-scripts/CCTree')
  call minpac#add('vim-scripts/Gundo')

  call minpac#add('mg979/vim-visual-multi')

  call minpac#add('sbdchd/neoformat')

  call minpac#add('ctrlpvim/ctrlp.vim')

  call minpac#add('godlygeek/tabular')

  " gitgutter: Show diff in the column sign (See :help signcolumn)
  call minpac#add('airblade/vim-gitgutter')

  call minpac#add('neomake/neomake')

  call minpac#add('voldikss/vim-floaterm')

  call minpac#add('luochen1990/rainbow')

  call minpac#add('wellle/context.vim')

  " Vista: Vista relies on universal-ctags. Please carefully install the correct version. 
  call minpac#add('liuchengxu/vista.vim')
  call minpac#add('liuchengxu/vim-which-key')

  call minpac#add('vim-airline/vim-airline')

  call minpac#add('rafi/awesome-vim-colorschemes')
endfunction

" Define user commands for updating/cleaning the plugins.
" Each of them calls PackInit() to load minpac and register
" the information of plugins, then performs the task.
command! PackUpdate call PackInit() | call minpac#update()
command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#init() | call minpac#status()

" Plugin customization {{{1

if !empty(globpath(&rtp, '/plugin/vista.vim'))
  let g:vista_sidebar_width = 90

  " t means tag
  nnoremap <silent> <Leader>s :Vista!!<CR>  

endif

if !empty(globpath(&rtp, '/plugin/neomake.vim'))

  " Run neomake when writing
  call neomake#configure#automake('w')
endif

if !empty(globpath(&rtp, '/plugin/floaterm.vim'))
  nmap <Leader>tb :FloatermPrev<CR>
  nmap <Leader>tn :FloatermNext<CR>
  nmap <Leader>tN :FloatermNew<CR>
  nmap <Leader>tk :FloatermKill<CR>
  nmap <Leader>tt :FloatermToggle<CR>
endif

if !empty(globpath(&rtp, '/plugin/airline.vim'))
  " Enhanced tabline
  let g:airline#extensions#tabline#enabled = 1
  " Show buffer number so the buffer can be quickly picked
  let g:airline#extensions#tabline#buffer_nr_show = 1

endif

if !empty(globpath(&rtp, '/plugin/rainbow_main.vim'))
  " This variable must be defined to use rainbow. 
  " Set to 0 to enable it later via :RainbowToggle
  let g:rainbow_active = 1 
endif

if !empty(globpath(&rtp, '/plugin/which_key.vim'))
  let g:which_key_map = {}
  let g:which_key_map.c = {
        \ 'name': '+Comment',
        \ 'c': 'Comment line',
        \ }
  let g:which_key_map.f = {
        \ 'name': '+Find',
        \ }
  let g:which_key_map.g = {
        \ 'name': '+Git',
        \ 'd': 'Diff',
        \ }
  let g:which_key_map.h = {
        \ 'name': '+Hunk',
        \ 'p': 'Preview the hunk',
        \ 's': 'Stage the hunk',
        \ 'u': 'Undo the hunk',
        \ }
  let g:which_key_map.s = {
        \ 'name': '+Symbol',
        \ }
  let g:which_key_map.t = {
        \ 'name': '+Terminal',
        \ }
  call which_key#register('<Space>', "g:which_key_map")

  nnoremap <silent> <Leader> :<c-u>WhichKey '<Leader>'<CR>
  vnoremap <silent> <Leader> :<c-u>WhichKeyVisual '<Leader>'<CR>
  nnoremap <silent> <LocalLeader> :<c-u>WhichKey '<LocalLeader>'<CR>
  vnoremap <silent> <LocalLeader> :<c-u>WhichKeyVisual '<LocalLeader>'<CR>

endif

" }}}1

" View {{{1
try
  " Colorscheme may use plugin: gruvbox
  colorscheme gruvbox
catch
  " Builtin colorschemes: desert, peachpuff, quiet, slate
  colorscheme desert
endtry
" }}}1

" Options {{{1
set hlsearch    " Highlight the search results
set incsearch   " Show the pattern while typing

set modeline    " Modeline is the last comment line if vim is the editor. Use `help modeline` for detail.

set hidden  " Hide unsaved buffer

set expandtab   " Expand tag to space
set tabstop=4   " One tab includes four spaces
set shiftwidth=4    " The width of '<' and '>'
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode.

set smartindent     " Do smart autoindenting

set ruler           " show the cursor position 
set wildmenu        " display completion matches in a status line
set number          " Show line number
set splitbelow      " New buffer splits below by default
set splitright      " New buffer splits right by default
set mouse=a         " Enable mouse in all mode
set scrolloff=5     " Show a few lines around the cursor
set fileencodings=utf-8,gb18030,latin1

"Spell options
set spell   " Set spell check
set spelllang+=cjk  " Spell check for chinese
" Clear the default highlight of the Spell check
highlight clear SpellBad
" Set the highlight style as underline
highlight SpellBad cterm=underline  

set background=dark

syntax enable       " This enables Vim's syntax-related features. 
" Without this, some VimTeX features will not work 
" }}}1

" Commends {{{1

augroup EnhancedHelp
  au!

  autocmd BufWinEnter * 
        \ if &filetype == 'help'
        \ |   set number 
        \ |   if winwidth('%') > 180
        \ |       wincmd L 
        \ |       vertical resize 90
        \ |   endif
        \ | endif

augroup END

" }}}1


" vim: set sw=2 sts=2 et fdm=marker:
