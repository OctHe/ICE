" Simple and lighweight vim run command file. It only contains one file.
" Author: OctHe
" Copyright (C)
" 
" =====================================================================
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
if &compatible
  set nocompatible
endif

" Enable file type detection.
filetype plugin on
" Enable automatic indentation.
filetype indent on

set runtimepath-=~/.vim
set runtimepath-=~/.vim/after
set runtimepath^=~/.config/slim
set runtimepath+=~/.config/slim/after
set packpath-=~/.vim
set packpath-=~/.vim/after
set packpath^=~/.config/slim
set packpath+=~/.config/slim/after

" Use <Space> as the <Leader>
" This command must be before all keymappings and plugin configs
let mapleader = ' '

" It changes the behavior of star to not jump to next word
" Yank the word into the register s, and then assign it in to the yank
" register (The register / is not writeable directly)
nmap <silent> * "syiw:let @/ = @s<CR>
" Easy-nohlsearch
nnoremap <silent> <Esc> :nohlsearch<CR>
tnoremap <silent> <Esc><Esc> <C-\><C-n><CR>
" Easy indent
vmap < <gv
vmap > >gv
" Show mappings
nnoremap <silent> <Leader>m :verbose map


" Try to install minpac
let s:minpac_dir = expand('~/.config/slim/pack/minpac/opt/minpac')
if !(s:minpac_dir->isdirectory())
  execute '!git clone --depth=1 https://github.com/k-takata/minpac.git' s:minpac_dir
  packadd minpac
endif

function! PackInit() abort
  packadd minpac

  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " Additional plugins here.

  call minpac#add('tpope/vim-fugitive')

  " starsearch: Enhanced star keymapping. Avoid jumping to next
  call minpac#add('vim-scripts/star-search')
  call minpac#add('vim-scripts/AutoComplPop')
  call minpac#add('vim-scripts/CCTree')
  call minpac#add('vim-scripts/Gundo')

  " NERDTree: File explorer.
  call minpac#add('preservim/nerdtree')
  call minpac#add('preservim/tagbar')
  call minpac#add('preservim/nerdcommenter')
  call minpac#add('preservim/vim-indent-guides')

  " Automatic closing of quotes, parenthesis, brackets,
  call minpac#add('Raimondi/delimitMate')

  call minpac#add('machakann/vim-sandwich')

  call minpac#add('timsu92/vim-easymotion')

  call minpac#add('ludovicchabant/vim-gutentags')

  call minpac#add('sbdchd/neoformat')

  call minpac#add('ctrlpvim/ctrlp.vim')

  " Align
  call minpac#add('godlygeek/tabular')

  call minpac#add('neomake/neomake')

  call minpac#add('skywind3000/asyncrun.vim')

  " gitgutter: Show diff in the column sign (See :help signcolumn)
  call minpac#add('airblade/vim-gitgutter')

  call minpac#add('liuchengxu/vim-which-key')

  call minpac#add('vim-airline/vim-airline')

  call minpac#add('rafi/awesome-vim-colorschemes')
endfunction

" Define user commands for updating/cleaning the plugins.
" Each of them calls PackInit() to load minpac and register
" the information of plugins, then performs the task.
command! PackUpdate call PackInit() | call minpac#update()
command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#init() | call minpac#status()

" Plugin customization
function PackConfig()
  if !empty(globpath(&rtp, '/plugin/tagbar.vim'))

    " s means symbol
    nnoremap <silent> <Leader>s :Tagbar<CR>
  endif

  if !empty(globpath(&rtp, '/plugin/nerdcommenter.vim'))

    let g:NERDSpaceDelims = 1
    let g:NERDRemoveExtraSpaces = 1

  endif

  if !empty(globpath(&rtp, '/plugin/indent_guides.vim'))

    let g:indent_guides_enable_on_vim_startup = 1

  endif

  if !empty(globpath(&rtp, '/plugin/NERD_tree.vim'))

    let NERTTreeCaseSensitiveSort = 1
    let NERDTreeWinSize = 35

    augroup NERDTree
      au!

      " Close vim if the only window left open is a NERDTree
      autocmd BufEnter *
            \ if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()
            \ |   quit
            \ | endif

      " If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
      autocmd BufEnter *
            \ if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1
            \ |   let buf=bufnr('%')
            \ |   buffer#
            \ |   execute "normal! \<C-W>w"
            \ |   execute 'buffer'.buf
            \ | endif
    augroup END

    " e means explore
    nnoremap <silent> <Leader>e :NERDTreeToggle<CR>

endif

if !empty(globpath(&rtp, '/plugin/airline.vim'))
  " Enhanced tabline
  let g:airline#extensions#tabline#enabled = 1
  " Show buffer number so the buffer can be quickly picked
  let g:airline#extensions#tabline#buffer_nr_show = 1

endif

if !empty(globpath(&rtp, '/plugin/which_key.vim'))
  let g:which_key_map = {}
  let g:which_key_map.c = {
        \ 'name': '+Comment',
        \ 'c': 'Comment line',
        \ }
  let g:which_key_map.e = {
        \ 'name': 'Explorer',
        \ }
  let g:which_key_map.f = {
        \ 'name': '+Find',
        \ }
  let g:which_key_map.g = {
        \ 'name': '+Git',
        \ 'd': 'Diff',
        \ }
  let g:which_key_map.h = {
        \ 'name': '+Hunk',
        \ 'p': 'Preview the hunk',
        \ 's': 'Stage the hunk',
        \ 'u': 'Undo the hunk',
        \ }
  let g:which_key_map.s = {
        \ 'name': 'Symbol',
        \ }
  call which_key#register('<Space>', "g:which_key_map")

  nnoremap <silent> <Leader> :<c-u>WhichKey '<Leader>'<CR>
  vnoremap <silent> <Leader> :<c-u>WhichKeyVisual '<Leader>'<CR>
  nnoremap <silent> <LocalLeader> :<c-u>WhichKey '<LocalLeader>'<CR>
  vnoremap <silent> <LocalLeader> :<c-u>WhichKeyVisual '<LocalLeader>'<CR>

endif
endfunction

autocmd VimEnter * call PackConfig()

" View {{{1
try
  " Colorscheme may use plugin
  colorscheme OceanicNext
catch
  " Builtin colorschemes: desert, peachpuff, quiet, slate
  colorscheme desert
endtry
" }}}1

" Options {{{1
set hlsearch    " Highlight the search results
set incsearch   " Show the pattern while typing

set modeline    " Modeline is the last comment line if vim is the editor. Use `help modeline` for detail.

set hidden  " Hide unsaved buffer

set expandtab   " Expand tag to space
set tabstop=4   " One tab includes four spaces
set shiftwidth=4    " The width of '<' and '>'
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode.

set smartindent     " Do smart autoindenting

set ruler           " show the cursor position
set wildmenu        " display completion matches in a status line
set number          " Show line number
set splitbelow      " New buffer splits below by default
set splitright      " New buffer splits right by default
set mouse=a         " Enable mouse in all mode
set scrolloff=5     " Show a few lines around the cursor
set fileencodings=utf-8,gb18030,latin1

set background=dark

syntax enable       " This enables Vim's syntax-related features.
" }}}1

" Commends {{{1

augroup EnhancedHelp
  au!

  autocmd BufWinEnter *
        \ if &filetype == 'help'
        \ |   set number
        \ |   if winwidth('%') > 180
        \ |       wincmd L
        \ |       vertical resize 90
        \ |   endif
        \ | endif

augroup END

" }}}1


" vim: set sw=2 sts=2 et fdm=marker:
