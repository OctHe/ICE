" 
" Vim run command file
" Author: OctHe
" Copyright (C): 2023
" It includes options, commands, keymappings as well as plugins
" 
" =====================================================================
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
if &compatible
    set nocompatible
endif

" Enable file type detection.
filetype plugin on
" Enable automatic indentation.
filetype indent on

" Global variables {{{1
let g:plugin_dir = '~/.local/share/vim/plugins/'
let g:plugin_manager = 'dein'

let g:enable_plugins = [
            \ 'surround',
            \ 'autopair',
            \ 'commentary',
            \ 'nerdtree',
            \ 'vista', 
            \ 'cctree',
            \ 'gutentags',
            \ 'sneak',
            \ 'ale', 
            \ 'floaterm',
            \ 'asyncrun',
            \ 'vimtex',
            \ 'fugitive',
            \ 'gitgutter',
            \ 'airline',
            \ 'tmux_navi',
            \ 'indentline',
            \ 'whichkey',
            \ 'rainbow',
            \ 'gruvbox',
            \ ]
if has('python3')
    let g:enable_plugins += [
                \ 'leaderf',
                \ 'ycm',
                \ 'vimsnippets',
                \ 'ultisnips',
                \ 'vimspector',
                \ ]
else
    let g:enable_plugins += [
                \ 'ctrlp',
                \ ]
endif

"}}}1

" 'if 1' will be false when vim does not have '+eval' function
if 1
    call packless#plugininstall( g:enable_plugins )
endif

" Options {{{1
set hlsearch    " Highlight the search results
set incsearch   " Show the pattern while typing

set modeline    " Modeline is the last comment line if vim is the editor. Use `help modeline` for detail.

set hidden  " Hide unsaved buffer

set expandtab   " Expand tag to space
set tabstop=4   " One tab includes four spaces
set shiftwidth=4    " The width of '<' and '>'
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode.

set smartindent     " Do smart autoindenting

set ruler           " show the cursor position 
set wildmenu        " display completion matches in a status line
set number          " Show line number
set splitbelow      " New buffer splits below by default
set splitright      " New buffer splits right by default
set mouse=a         " Enable mouse in all mode
set scrolloff=5     " Show a few lines around the cursor
set fileencodings=utf-8,gb18030,latin1

if has('gui_running')
    " GUI options
    set guioptions=aegrLt
    set background=light
else
    set background=dark
endif

syntax enable       " This enables Vim's syntax-related features. 
" Without this, some VimTeX features will not work 
" }}}1

" Commends {{{1

" Command to see the difference between the current buffer and the file loaded from.
if !exists(':DiffOrig')
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

augroup PLStart
    au!

    " A more suitable help file
    autocmd BufWinEnter * 
                \ if &filetype == 'help'
                \ |   set number 
                \ |   if winwidth('%') > 180
                \ |       wincmd L 
                \ |       vertical resize 90
                \ |   endif
                \ | endif

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim) and for a commit message (it's
    " likely a different one than last time).
    autocmd BufReadPost *
                \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
                \ |   exe "normal! g`\""
                \ | endif

    autocmd CmdwinEnter *
                \ echohl Todo
                \ | echo 'You discovered the command-line window! You can close it with ":q".'
                \ | echohl None
augroup END

" }}}1

" Keymappings {{{1

" Use <Space> as the <Leader>
" This command must be before all keymappings and plugin configs
let mapleader = ' '

" It changes the behavior of star to not jump to next word
" Yank the word into the register s, and then assign it in to the yank
" register (The register / is not writeable directly)
nmap <silent> * "syiw:let @/ = @s<CR>

" Easy-nohlsearch
nnoremap <silent> <Esc> :nohlsearch<CR>
tnoremap <silent> <Esc><Esc> <C-\><C-n><CR>

" Show mappings
nnoremap <silent> <Leader>m :verbose map 

" }}}1

" View {{{1

" Config load plugins
if 1
    call packless#pluginconfig( g:enable_plugins )
endif

try
    " Colorscheme may use plugin
    colorscheme gruvbox
catch
    " Builtin colorschemes: desert, peachpuff, quiet, slate
    " Colorschemes plugin: gruvbox
    colorscheme desert
endtry
" }}}1

" vim: set sw=4 sts=4 et fdm=marker:
